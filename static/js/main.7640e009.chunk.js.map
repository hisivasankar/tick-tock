{"version":3,"sources":["Utils/DateUtils.js","Widget/Widget.js","WidgetContainer/WidgetContainer.js","App.js","serviceWorker.js","index.js"],"names":["getDate","date","Date","parse","now","timeElapsed","timeInMs","format","diffInMinutes","diffInHours","diffInDays","formatTimeInMS","fromDate","toDate","from","dateDifference","Widget","props","time","react_default","a","createElement","className","title","WidgetContainer","widgets","data","map","widget","src_Widget_Widget","key","widgetData","App","src_WidgetContainer_WidgetContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAAA,SAASA,EAAQC,GACf,MAAoB,kBAATA,EACF,IAAIC,KAAKA,KAAKC,MAAMF,IAET,kBAATA,EACF,IAAIC,KAAKD,GAEbA,OAAL,EACS,IAAIC,KAAKA,KAAKE,OAqClB,SAASC,EAAYJ,GAC1B,OA1BF,SAAwBK,EAAUC,GAChC,IAEMC,GAFiBF,EAAW,IAAQ,GAEH,GAAM,EAGvCG,EAAeD,EAAgB,GAAM,EAGrCE,EAAcD,EAAc,GAAM,EAaxC,OANIC,EAAa,KAJIA,EAAa,IAAO,GAKV,cAPTA,EAAa,IAO4B,QAE9CA,EAAa,aAZPD,EAAc,GAYyB,SAOvDE,CAjCT,SAAwBC,EAAUC,GAChC,IAAMC,EAAOd,EAAQY,GAGrB,OAFWZ,EAAQa,GACGC,EA8BAC,CAAed,cC9BxBe,EAVA,SAAAC,GACb,IAAMC,EAAOb,EAAYY,EAAMH,MAC/B,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASL,EAAMM,OAC7BJ,EAAAC,EAAAC,cAAA,UAAKH,KCAIM,SARS,SAAAP,GACtB,IACMQ,EADaR,EAAMS,KACEC,IAAI,SAAAC,GAAM,OACnCT,EAAAC,EAAAC,cAACQ,EAAD,CAAQC,IAAKF,EAAOL,MAAOA,MAAOK,EAAOL,MAAOT,KAAMc,EAAOd,SAE/D,OAAOK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWG,KCH7BM,SAAa,CACjB,CACER,MAAO,MACPT,KAAM,cAER,CACES,MAAO,uBACPT,KAAM,cAER,CACES,MAAO,SACPT,KAAM,gBAmBKkB,mLAbX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,uCAEFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACY,EAAD,CAAiBP,KAAMK,aARfG,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7640e009.chunk.js","sourcesContent":["function getDate(date) {\n  if (typeof date === \"string\") {\n    return new Date(Date.parse(date));\n  }\n  if (typeof date === \"number\") {\n    return new Date(date);\n  }\n  if (!date) {\n    return new Date(Date.now());\n  }\n  return;\n}\n\nfunction dateDifference(fromDate, toDate) {\n  const from = getDate(fromDate);\n  const to = getDate(toDate);\n  const diffInMS = to - from;\n  return diffInMS;\n}\n\nfunction formatTimeInMS(timeInMs, format) {\n  const diffInSeconds = (timeInMs / 1000) | 0;\n\n  const diffInMinutes = (diffInSeconds / 60) | 0;\n  const remainingMinutes = diffInMinutes % 60;\n\n  const diffInHours = (diffInMinutes / 60) | 0;\n  const remainingHours = diffInHours % 24;\n\n  const diffInDays = (diffInHours / 24) | 0;\n  const remainingDays = diffInDays % 365;\n\n  const diffInYears = (diffInDays / 365) | 0;\n\n  let formatedTime = \"\";\n\n  if (diffInDays > 365) {\n    formatedTime = diffInYears + \" Years and \" + remainingDays + \" Days\";\n  } else {\n    formatedTime = diffInDays + \" Days and \" + remainingHours + \" Hours\";\n  }\n\n  return formatedTime;\n}\n\nexport function timeElapsed(date) {\n  return formatTimeInMS(dateDifference(date));\n}\n\n// const myAge = formatTimeInMS(dateDifference(\"1993/07/25\"));\n// const timeElapsedSinceFasting = formatTimeInMS(dateDifference(\"2018/12/24\"));\n\n// console.log(\"Age: \", myAge);\n// console.log(\"Fasting for: \", timeElapsedSinceFasting);\n","import React from \"react\";\n\nimport { timeElapsed } from \"../Utils/DateUtils\";\n\nimport \"./Widget.css\";\n\nconst Widget = props => {\n  const time = timeElapsed(props.from);\n  return (\n    <div className=\"Widget\">\n      <h1 className=\"title\">{props.title}</h1>\n      <h2>{time}</h2>\n    </div>\n  );\n};\n\nexport default Widget;\n","import React from \"react\";\nimport Widget from \"../Widget/Widget\";\nimport \"./WidgetContainer.css\";\nconst WidgetContainer = props => {\n  const widgetData = props.data;\n  const widgets = widgetData.map(widget => (\n    <Widget key={widget.title} title={widget.title} from={widget.from} />\n  ));\n  return <div className=\"Widgets\">{widgets}</div>;\n};\n\nexport default WidgetContainer;\n","import React, { Component } from \"react\";\nimport WidgetContainer from \"./WidgetContainer/WidgetContainer\";\n\nimport \"./App.css\";\n\nconst widgetData = [\n  {\n    title: \"Age\",\n    from: \"1993/07/25\"\n  },\n  {\n    title: \"Intermittent Fasting\",\n    from: \"2018/12/24\"\n  },\n  {\n    title: \"Braces\",\n    from: \"2018/12/23\"\n  }\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Tick Tock - Time Tracker</h1>\n        </header>\n        <main>\n          <WidgetContainer data={widgetData} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}